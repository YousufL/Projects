# -*- coding: utf-8 -*-
"""Stock Market Prediction from Financial News Sentiments.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y4kGfV0DwhkpQRTBr-5IC9uRLQuFVigv

# **Introduction**

The following Code was used for the APS360 course project where we investigated the impact of news sentiment on stock market prices

## **Downloading and Importing Packages**

##**Yahoo Finance**
"""

#Install yfinance data of stock prices
!pip install yfinance

"""##**TQDM**"""

!pip install tqdm

#Import Necessary libraries
import csv
import zipfile
import csv
from datetime import date
from datetime import timedelta
from itertools import islice
import yfinance as yf
import torch
import os
from tqdm import tqdm
import time

"""## **Kaggle API**"""

#Install Kaggle Requirements
!pip install kaggle

# Commented out IPython magic to ensure Python compatibility.
# %cd ..
!mkdir .kaggle
# %cd root
!mkdir .kaggle
# %cd ..
# %cd content
!mkdir .kaggle

#Set kaggle as directory
!mkdir .kaggle

#Set up Kaggle API key with Kaggle account
import json
token = {'username':'yousufl','key':'db83b25a8f0903f3b64f956a78c9654a'}
with open('/content/.kaggle/kaggle.json', 'w') as file:
    json.dump(token, file)

#Set kaggle.json
!cp /content/.kaggle/kaggle.json ~/.kaggle/kaggle.json

#Set path
!kaggle config set -n path -v{/content}

#Download financial news article dataset
!kaggle datasets download -d jeet2016/us-financial-news-articles -p /content

#Unzip files from dataset and upload
!unzip \*.zip

"""##**Generating Date List**"""

#Mount Drive
from google.colab import drive
drive.mount('/content/gdrive')

#Helper function to turn date object to iso string
def getiso(d):
  return d.isoformat()

# Create date list over a 7 month period / Dec 2017 - Jun 2018
# Remove any 'dates' that don't exist, such as Feb 31
dates_list = []
for m in range(1,7):
   for d in range(1, 32):
     try: 
       the_date = date(2018, m, d)
       pass
     except ValueError:
       print("{}-{} combo does not exist".format(m, d))
       pass
       
     dates_list.append(the_date)
for m in range(12,13):
   for d in range(1, 32):
     try: 
       the_date = date(2017, m, d)
       pass
     except ValueError:
       print("{}-{} combo does not exist".format(m, d))
       pass
       
     dates_list.append(the_date)

## Creating an identical list, but with the dates formatted as iso strings
iso_dateslist = ([getiso(x) for x in dates_list])

iso_dateslist

"""##**Manually Selected Stock Tickers**
Tickers represent the 500 companies from the S&P 500
"""

#@title
# these ticker strings were copied from the internet
# they were joined with commas in Excel
strs=["MSFT", 
"AAPL", 
"AMZN", 
"FB", 
"JPM", 
"GOOG", 
"GOOGL", 
"JNJ", 
"XOM", 
"V", 
"PG", 
"T", 
"BAC", 
"INTC", 
"HD", 
"VZ", 
"MA", 
"UNH", 
"DIS", 
"CVX", 
"WFC", 
"MRK", 
"PFE", 
"CSCO", 
"KO", 
"CMCSA", 
"BA", 
"PEP", 
"C", 
"WMT", 
"MCD", 
"ABT", 
"MDT", 
"ADBE", 
"CRM", 
"COST", 
"PM", 
"HON", 
"AMGN", 
"NVDA", 
"NFLX", 
"UNP", 
"AVGO", 
"ORCL", 
"IBM", 
"ABBV", 
"UTX", 
"ACN", 
"PYPL", 
"TMO", 
"NKE", 
"TXN", 
"NEE", 
"LIN", 
"QCOM", 
"MMM", 
"SBUX", 
"GE", 
"LLY", 
"LMT", 
"BMY", 
"AMT", 
"CVS", 
"LOW", 
"MO", 
"DHR", 
"UPS", 
"USB", 
"GILD", 
"CAT", 
"FIS", 
"AXP", 
"CHTR", 
"CELG", 
"MDLZ", 
"TJX", 
"GS", 
"CME", 
"ANTM", 
"CI", 
"ADP", 
"CB", 
"DUK", 
"PNC", 
"D", 
"BDX", 
"INTU", 
"COP", 
"ISRG", 
"SO", 
"SYK", 
"SPGI", 
"MS", 
"RTN", 
"FISV", 
"CSX", 
"AGN", 
"ZTS", 
"BLK", 
"CL", 
"TGT", 
"DE", 
"BSX", 
"CCI", 
"DD", 
"PLD", 
"BIIB", 
"MU", 
"PSX", 
"NOC", 
"ITW", 
"AMAT", 
"MMC", 
"NSC", 
"SLB", 
"SCHW", 
"VRTX", 
"ICE", 
"GPN", 
"EW", 
"ECL", 
"GM", 
"SPG", 
"AIG", 
"APD", 
"WBA", 
"SHW", 
"COF", 
"AON", 
"EMR", 
"AEP", 
"KMB", 
"EQIX", 
"ILMN", 
"MPC", 
"EXC", 
"LHX", 
"EOG", 
"ATVI", 
"BBT", 
"WM", 
"BK", 
"GD", 
"ADI", 
"VLO", 
"SYY", 
"DG", 
"ROST", 
"EL", 
"DOW", 
"LRCX", 
"PGR", 
"KMI", 
"HUM", 
"BAX", 
"FDX", 
"AMD", 
"AFL", 
"SRE", 
"MET", 
"ETN", 
"OXY", 
"PRU", 
"MAR", 
"HCA", 
"ROP", 
"F", 
"JCI", 
"ALL", 
"MCO", 
"WELL", 
"TRV", 
"CTSH", 
"ADSK", 
"DAL", 
"ORLY", 
"PSA", 
"STZ", 
"TEL", 
"XEL", 
"IR", 
"STI", 
"APH", 
"PEG", 
"GIS", 
"NEM", 
"PPG", 
"YUM", 
"EQR", 
"OKE", 
"AVB", 
"ED", 
"EA", 
"HLT", 
"WEC", 
"ZBH", 
"CMI", 
"AZO", 
"TROW", 
"LUV", 
"EBAY", 
"VFC", 
"WMB", 
"INFO", 
"PCAR", 
"KLAC", 
"HPQ", 
"DLTR", 
"TDG", 
"REGN", 
"DFS", 
"PAYX", 
"STT", 
"ES", 
"MSI", 
"SBAC", 
"TMUS", 
"FE", 
"IQV", 
"DLR", 
"MCK", 
"PH", 
"LYB", 
"FLT", 
"O", 
"APTV", 
"PPL", 
"SWK", 
"TSN", 
"XLNX", 
"ADM", 
"ALXN", 
"WLTW", 
"EIX", 
"MCHP", 
"GLW", 
"A", 
"ETR", 
"TWTR", 
"PXD", 
"NTRS", 
"IDXX", 
"VRSK", 
"DTE", 
"VTR", 
"KR", 
"MTB", 
"CTAS", 
"SYF", 
"FITB", 
"HPE", 
"WY", 
"MNST", 
"LVS", 
"AME", 
"HIG", 
"FTV", 
"AWK", 
"BLL", 
"CERN", 
"CNC", 
"ROK", 
"FAST", 
"HSY", 
"ESS", 
"AMP", 
"UAL", 
"RMD", 
"KHC", 
"SNPS", 
"MSCI", 
"CDW", 
"BXP", 
"VRSN", 
"KEYS", 
"MKC", 
"RCL", 
"KEY", 
"CTVA", 
"CMG", 
"CDNS", 
"ALGN", 
"CBRE", 
"EXPE", 
"VMC", 
"CLX", 
"FRC", 
"ANSS", 
"AEE", 
"HAL", 
"RSG", 
"HES", 
"CCL", 
"IP", 
"MTD", 
"ARE", 
"BBY", 
"CMS", 
"OMC", 
"RF", 
"SWKS", 
"DHI", 
"CFG", 
"PEAK", 
"NUE", 
"CINF", 
"AJG", 
"LEN", 
"MXIM", 
"CPRT", 
"CHD", 
"AMCR", 
"LH", 
"EFX", 
"DOV", 
"KMX", 
"WDC", 
"MGM", 
"FCX", 
"K", 
"MLM", 
"GPC", 
"TFX", 
"HBAN", 
"CE", 
"MAA", 
"CAH", 
"KSU", 
"INCY", 
"EVRG", 
"FANG", 
"BKR", 
"WCG", 
"PFG", 
"CXO", 
"ULTA", 
"IFF", 
"AKAM", 
"CNP", 
"COO", 
"WAT", 
"GWW", 
"XYL", 
"UDR", 
"NTAP", 
"WAB", 
"BR", 
"IT", 
"NLOK", 
"DRI", 
"STX", 
"EXR", 
"GRMN", 
"MAS", 
"DGX", 
"CTXS", 
"CAG", 
"TIF", 
"EXPD", 
"JEC", 
"L", 
"CTL", 
"TTWO", 
"ABC", 
"FTNT", 
"MKTX", 
"HOLX", 
"CBOE", 
"FMC", 
"HST", 
"ATO", 
"DRE", 
"SIVB", 
"AAL", 
"XRAY", 
"CBS", 
"LNC", 
"WYNN", 
"SJM", 
"LNT", 
"QRVO", 
"AAP", 
"IEX",
"TSCO", 
"FOXA", 
"NVR", 
"ARNC", 
"NDAQ", 
"UHS", 
"URI", 
"NCLH", 
"AES", 
"HRL", 
"EMN", 
"LDOS", 
"VAR", 
"WU", 
"AVY", 
"LW", 
"REG", 
"JKHY", 
"HAS", 
"LKQ", 
"ALLE", 
"RJF", 
"TXT", 
"PKG", 
"CMA", 
"ETFC", 
"NBL", 
"CF", 
"CHRW", 
"RE", 
"VNO", 
"ANET", 
"JBHT", 
"PNW", 
"TAP", 
"HSIC", 
"MRO", 
"WRK", 
"NRG", 
"NI", 
"WHR", 
"GL", 
"PHM", 
"ABMD", 
"PKI", 
"IRM", 
"HII", 
"SNA", 
"FRT", 
"DVN", 
"BWA", 
"NOV", 
"MYL", 
"DISCK", 
"ZION", 
"APA", 
"MHK", 
"FTI", 
"KIM", 
"KSS", 
"ALK", 
"FFIV", 
"FBHS", 
"JNPR", 
"IPG", 
"HFC", 
"DISH", 
"BEN", 
"AIV", 
"VIAB", 
"CPB", 
"TPR", 
"DXC", 
"AIZ", 
"NWL", 
"COG", 
"MOS", 
"PRGO", 
"NLSN", 
"PNR", 
"ALB", 
"FLIR", 
"AOS", 
"PVH", 
"SLG", 
"LEG", 
"IVZ", 
"XRX", 
"RHI", 
"PBCT", 
"SEE", 
"PWR", 
"FLS", 
"HOG", 
"UNM", 
"DVA", 
"HBI", 
"ROL", 
"IPGP", 
"RL", 
"CPRI", 
"NWSA", 
"M", 
"FOX", 
"HRB", 
"XEC", 
"HP", 
"AMG", 
"DISCA", 
"ADS", 
"TRIP", 
"LB", 
"GPS", 
"JWN", 
"COTY", 
"UAA", 
"UA", 
"MAC", 
"NWS"]

#Display ticker list
ticker_list = strs
print(ticker_list)

"""## **Loading Raw Data from Yahoo Finance API**"""

#Function to load yahoo finance data
def load_yf_data():
  ticker_string = " ".join(ticker_list)
  data = yf.download(tickers = ticker_string, period = "2y", 
                    interval = "1d", group_by = 'ticker', 
                    auto_adjust = True, prepost = True,
                    threads = True, proxy = None
                    )
  return data

#Load yfinance data
rawdataset = load_yf_data()

## Remove any tickers that have not traded on the most recent day in the date list
## This will remove some tickers that have not been present for the majority of the dates
## This will be beneficial to speeding up the stock dataset creation
for tick in ticker_list:
  
  lastdateval = rawdataset[tick]['Open']['2018-05-31']
  if lastdateval != lastdateval:
    ticker_list.remove(tick)
    print(tick)

print(len(ticker_list))

"""## **Creating Stock Dataset**"""

#Storing stock elements from yfinance data
class StockItem:
  def __init__(self, d, ticker, *args):
    self.thedate = d
    self.ticker = ticker
    self.params = args
  def get_date(self):
    return self.thedate
  def get_raw_params(self):
    return self.params[0]

##Bubble Sort-like algorithm for ordering the date range tuples
def score(tup):
    return abs(tup[0]) + abs(tup[1])

def sorttup(list_tup):
  n = len(list_tup)
  for i in range(0, n-2):
    for j in range(0, n-2-i):
      if score(list_tup[j+1]) < score(list_tup[j]):
        list_tup[j+1], list_tup[j] = list_tup[j], list_tup[j+1] 
  return list_tup

#Generates features based off of dates
#Adjust dates for weekends and if there is no trading on a given day
#Stores corresponding stock item labels in a dictionary indexed by date and ticker
def create_stock_dataset(data):
  a = [1, 2, 3, 4]
  b = [-x for x in a]
  timeranges = [(y, x) for x in a for y in b]
  timranges = sorttup(timeranges)
  tickers={}
  for tick in tqdm(ticker_list):
    dates = {}
    for date in (dates_list):
      #clear()
      #print(j/len(dates_list))
      #convert dates to iso format for dictionary lookup      

      #calculate stock price changes
      #divide by open ? for percentage change
      datapoints = []
      dayiso = getiso(date)
      add_d = 0
      for timerange in (timeranges[:-3]):
        start, end = timerange
        #print(start, end)
        endiso = getiso(date + timedelta(days = end))
        startiso  = getiso(date + timedelta(days = start))
        ck = data[tick]['Close'].keys()
        ok = data[tick]['Open'].keys()
        if endiso not in ck or startiso not in ok:
          continue
        startval = float(data[tick]['Open'][startiso])
        endval = float(data[tick]['Close'][endiso])
        val_frac_chg = (endval - startval)/startval
        if val_frac_chg == val_frac_chg:
          #print("breaking", tick, getiso(date))
          datapoints.append(val_frac_chg)
          break
        else:
          pass
          #print(val_frac_chg, "trying next combo", tick, endiso, startiso)
      if val_frac_chg != val_frac_chg:
        print("issue, vfc = 0", tick, getiso(date))
        #i = input()
        datapoints.append(0)   
      #datapoints = (daychg7, daychg1, daychg, day3chg, day7chg)
      stkitm = StockItem(date, tick, datapoints)
      dates[getiso(date)] = stkitm
    tickers[tick] = dates
  return tickers

label_creation = create_stock_dataset(rawdataset)

#@title
#Label example for facebook on January 1, 2018. 
# Positive value indicates the stock price increased from the previous day
print(label_creation['FB']['2018-01-01'].get_raw_params())

#Function to obtain parameters for every stock item
def get_stock_params(stocki: StockItem):
  ps = stocki.get_raw_params()
  return ps[0]

#Function to obtain dictionary of date labels
def generate_label_dictionary():
  labels = {}
  for date in dates_list:
    daily_label = get_daily_label(date)
    labels[getiso(date)] = daily_label
  return labels

#Function to label all stock tickers with a daily label
def get_daily_label(d):
  tnsr = torch.zeros(len(ticker_list), 1)
  for i, tick in enumerate(ticker_list):
    tnsr[i] = torch.tensor(get_stock_params(label_creation[tick][getiso(d)]))
  return tnsr

#Generate dated labels
dated_labels= generate_label_dictionary()

max(dated_labels['2018-01-01'])

#Function to look up the label of a date
def label_lookup(d:str, *tickers):
    #d is iso string for the date
    tick_indices = []
    #print(dated_labels[d])
    complete_date_label = torch.zeros(dated_labels[d].shape[0], 1)
    #print(complete_date_label[0])
    #print(tickers)
    tickers = [x for x in tickers[0] if x in ticker_list]
    #
    for tick in tickers:
      tick_indices.append(ticker_list.index(tick))
    #print(tick_indices)
    l = len(list(complete_date_label))

    for t in tick_indices:
        #print(t)
        #print(dated_labels[d][t])
        complete_date_label[t] = dated_labels[d][t]
    #print(complete_date_label)
    return complete_date_label

#@title
print(label_lookup('2018-01-02', ticker_list[50:80]))

"""## **Processing Text Data**

## **Downloading GloVe Embeddings and functions to clean and convert text to tensors**
"""

#Import Libraries
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from nltk.tokenize import sent_tokenize

from nltk.tokenize import TweetTokenizer
tknzr = TweetTokenizer()

#Import Libraries
import torchtext
from nltk.corpus import stopwords 
import nltk 
nltk.download('punkt')
nltk.download('stopwords')   
stop_words = set(stopwords.words('english'))

#Import Glove Embedding Library which contains a 50 dimensional embedding for words
glove = torchtext.vocab.GloVe(name='6B', dim=50)

#Example of Glove Embedding
print(glove['bezos'])

#Remove stopwords from articles
def remove_stopwords(article_text: str):
    word_tokens = tknzr.tokenize(article_text) 
    additional_filters = [";", ":", ",", "/", "(", ")", "-"]
    filtered_sentence = [] 
    for w in word_tokens: 
        if w not in stop_words and w not in additional_filters: 
            filtered_sentence.append(str.lower(w)) 
    return filtered_sentence

#Function that converts articles into tensors of glove embeddings 
def tensorify_text(article_text: str):
    emb_dim = 50
    maxlen = 200
    artlen = len(article_text)
    if artlen > maxlen: article_text = article_text[:maxlen]
    padded = torch.zeros(maxlen, emb_dim)
    for i, w in enumerate(article_text):
        padded[i] = glove[w]

    return padded

"""## **Dictionary and Functions to find relevant articles**"""

#Dictionary containing companies from S&P 500 with their sector and symbol
tickermap = [{"Name": "3M Company", "Sector": "Industrials", "Symbol": "MMM"},{"Name": "A.O. Smith Corp", "Sector": "Industrials", "Symbol": "AOS"},{"Name": "Abbott Laboratories", "Sector": "Health Care", "Symbol": "ABT"},{"Name": "AbbVie Inc.", "Sector": "Health Care", "Symbol": "ABBV"},{"Name": "Accenture plc", "Sector": "Information Technology", "Symbol": "ACN"},{"Name": "Activision Blizzard", "Sector": "Information Technology", "Symbol": "ATVI"},{"Name": "Acuity Brands Inc", "Sector": "Industrials", "Symbol": "AYI"},{"Name": "Adobe Systems Inc", "Sector": "Information Technology", "Symbol": "ADBE"},{"Name": "Advance Auto Parts", "Sector": "Consumer Discretionary", "Symbol": "AAP"},{"Name": "Advanced Micro Devices Inc", "Sector": "Information Technology", "Symbol": "AMD"},{"Name": "AES Corp", "Sector": "Utilities", "Symbol": "AES"},{"Name": "Aetna Inc", "Sector": "Health Care", "Symbol": "AET"},{"Name": "Affiliated Managers Group Inc", "Sector": "Financials", "Symbol": "AMG"},{"Name": "AFLAC Inc", "Sector": "Financials", "Symbol": "AFL"},{"Name": "Agilent Technologies Inc", "Sector": "Health Care", "Symbol": "A"},{"Name": "Air Products & Chemicals Inc", "Sector": "Materials", "Symbol": "APD"},{"Name": "Akamai Technologies Inc", "Sector": "Information Technology", "Symbol": "AKAM"},{"Name": "Alaska Air Group Inc", "Sector": "Industrials", "Symbol": "ALK"},{"Name": "Albemarle Corp", "Sector": "Materials", "Symbol": "ALB"},{"Name": "Alexandria Real Estate Equities Inc", "Sector": "Real Estate", "Symbol": "ARE"},{"Name": "Alexion Pharmaceuticals", "Sector": "Health Care", "Symbol": "ALXN"},{"Name": "Align Technology", "Sector": "Health Care", "Symbol": "ALGN"},{"Name": "Allegion", "Sector": "Industrials", "Symbol": "ALLE"},{"Name": "Allergan, Plc", "Sector": "Health Care", "Symbol": "AGN"},{"Name": "Alliance Data Systems", "Sector": "Information Technology", "Symbol": "ADS"},{"Name": "Alliant Energy Corp", "Sector": "Utilities", "Symbol": "LNT"},{"Name": "Allstate Corp", "Sector": "Financials", "Symbol": "ALL"},{"Name": "Alphabet Inc Class A", "Sector": "Information Technology", "Symbol": "GOOGL"},{"Name": "Alphabet Inc Class C", "Sector": "Information Technology", "Symbol": "GOOG"},{"Name": "Altria Group Inc", "Sector": "Consumer Staples", "Symbol": "MO"},{"Name": "Amazon.com Inc.", "Sector": "Consumer Discretionary", "Symbol": "AMZN"},{"Name": "Ameren Corp", "Sector": "Utilities", "Symbol": "AEE"},{"Name": "American Airlines Group", "Sector": "Industrials", "Symbol": "AAL"},{"Name": "American Electric Power", "Sector": "Utilities", "Symbol": "AEP"},{"Name": "American Express Co", "Sector": "Financials", "Symbol": "AXP"},{"Name": "American International Group, Inc.", "Sector": "Financials", "Symbol": "AIG"},{"Name": "American Tower Corp A", "Sector": "Real Estate", "Symbol": "AMT"},{"Name": "American Water Works Company Inc", "Sector": "Utilities", "Symbol": "AWK"},{"Name": "Ameriprise Financial", "Sector": "Financials", "Symbol": "AMP"},{"Name": "AmerisourceBergen Corp", "Sector": "Health Care", "Symbol": "ABC"},{"Name": "AMETEK Inc.", "Sector": "Industrials", "Symbol": "AME"},{"Name": "Amgen Inc.", "Sector": "Health Care", "Symbol": "AMGN"},{"Name": "Amphenol Corp", "Sector": "Information Technology", "Symbol": "APH"},{"Name": "Anadarko Petroleum Corp", "Sector": "Energy", "Symbol": "APC"},{"Name": "Analog Devices, Inc.", "Sector": "Information Technology", "Symbol": "ADI"},{"Name": "Andeavor", "Sector": "Energy", "Symbol": "ANDV"},{"Name": "ANSYS", "Sector": "Information Technology", "Symbol": "ANSS"},{"Name": "Anthem Inc.", "Sector": "Health Care", "Symbol": "ANTM"},{"Name": "Aon plc", "Sector": "Financials", "Symbol": "AON"},{"Name": "Apache Corporation", "Sector": "Energy", "Symbol": "APA"},{"Name": "Apartment Investment & Management", "Sector": "Real Estate", "Symbol": "AIV"},{"Name": "Apple Inc.", "Sector": "Information Technology", "Symbol": "AAPL"},{"Name": "Applied Materials Inc.", "Sector": "Information Technology", "Symbol": "AMAT"},{"Name": "Aptiv Plc", "Sector": "Consumer Discretionary", "Symbol": "APTV"},{"Name": "Archer-Daniels-Midland Co", "Sector": "Consumer Staples", "Symbol": "ADM"},{"Name": "Arconic Inc.", "Sector": "Industrials", "Symbol": "ARNC"},{"Name": "Arthur J. Gallagher & Co.", "Sector": "Financials", "Symbol": "AJG"},{"Name": "Assurant Inc.", "Sector": "Financials", "Symbol": "AIZ"},{"Name": "AT&T Inc.", "Sector": "Telecommunication Services", "Symbol": "T"},{"Name": "Autodesk Inc.", "Sector": "Information Technology", "Symbol": "ADSK"},{"Name": "Automatic Data Processing", "Sector": "Information Technology", "Symbol": "ADP"},{"Name": "AutoZone Inc", "Sector": "Consumer Discretionary", "Symbol": "AZO"},{"Name": "AvalonBay Communities, Inc.", "Sector": "Real Estate", "Symbol": "AVB"},{"Name": "Avery Dennison Corp", "Sector": "Materials", "Symbol": "AVY"},{"Name": "Baker Hughes, a GE Company", "Sector": "Energy", "Symbol": "BHGE"},{"Name": "Ball Corp", "Sector": "Materials", "Symbol": "BLL"},{"Name": "Bank of America Corp", "Sector": "Financials", "Symbol": "BAC"},{"Name": "Baxter International Inc.", "Sector": "Health Care", "Symbol": "BAX"},{"Name": "BB&T Corporation", "Sector": "Financials", "Symbol": "BBT"},{"Name": "Becton Dickinson", "Sector": "Health Care", "Symbol": "BDX"},{"Name": "Berkshire Hathaway", "Sector": "Financials", "Symbol": "BRK.B"},{"Name": "Best Buy Co. Inc.", "Sector": "Consumer Discretionary", "Symbol": "BBY"},{"Name": "Biogen Inc.", "Sector": "Health Care", "Symbol": "BIIB"},{"Name": "BlackRock", "Sector": "Financials", "Symbol": "BLK"},{"Name": "Block H&R", "Sector": "Financials", "Symbol": "HRB"},{"Name": "Boeing Company", "Sector": "Industrials", "Symbol": "BA"},{"Name": "Booking Holdings Inc", "Sector": "Consumer Discretionary", "Symbol": "BKNG"},{"Name": "BorgWarner", "Sector": "Consumer Discretionary", "Symbol": "BWA"},{"Name": "Boston Properties", "Sector": "Real Estate", "Symbol": "BXP"},{"Name": "Boston Scientific", "Sector": "Health Care", "Symbol": "BSX"},{"Name": "Brighthouse Financial Inc", "Sector": "Financials", "Symbol": "BHF"},{"Name": "Bristol-Myers Squibb", "Sector": "Health Care", "Symbol": "BMY"},{"Name": "Broadcom", "Sector": "Information Technology", "Symbol": "AVGO"},{"Name": "Brown-Forman Corp.", "Sector": "Consumer Staples", "Symbol": "BF.B"},{"Name": "C. H. Robinson Worldwide", "Sector": "Industrials", "Symbol": "CHRW"},{"Name": "CA, Inc.", "Sector": "Information Technology", "Symbol": "CA"},{"Name": "Cabot Oil & Gas", "Sector": "Energy", "Symbol": "COG"},{"Name": "Cadence Design Systems", "Sector": "Information Technology", "Symbol": "CDNS"},{"Name": "Campbell Soup", "Sector": "Consumer Staples", "Symbol": "CPB"},{"Name": "Capital One Financial", "Sector": "Financials", "Symbol": "COF"},{"Name": "Cardinal Health Inc.", "Sector": "Health Care", "Symbol": "CAH"},{"Name": "Carmax Inc", "Sector": "Consumer Discretionary", "Symbol": "KMX"},{"Name": "Carnival Corp.", "Sector": "Consumer Discretionary", "Symbol": "CCL"},{"Name": "Caterpillar Inc.", "Sector": "Industrials", "Symbol": "CAT"},{"Name": "Cboe Global Markets", "Sector": "Financials", "Symbol": "CBOE"},{"Name": "CBRE Group", "Sector": "Real Estate", "Symbol": "CBRE"},{"Name": "CBS Corp.", "Sector": "Consumer Discretionary", "Symbol": "CBS"},{"Name": "Celgene Corp.", "Sector": "Health Care", "Symbol": "CELG"},{"Name": "Centene Corporation", "Sector": "Health Care", "Symbol": "CNC"},{"Name": "CenterPoint Energy", "Sector": "Utilities", "Symbol": "CNP"},{"Name": "CenturyLink Inc", "Sector": "Telecommunication Services", "Symbol": "CTL"},{"Name": "Cerner", "Sector": "Health Care", "Symbol": "CERN"},{"Name": "CF Industries Holdings Inc", "Sector": "Materials", "Symbol": "CF"},{"Name": "Charles Schwab Corporation", "Sector": "Financials", "Symbol": "SCHW"},{"Name": "Charter Communications", "Sector": "Consumer Discretionary", "Symbol": "CHTR"},{"Name": "Chevron Corp.", "Sector": "Energy", "Symbol": "CVX"},{"Name": "Chipotle Mexican Grill", "Sector": "Consumer Discretionary", "Symbol": "CMG"},{"Name": "Chubb Limited", "Sector": "Financials", "Symbol": "CB"},{"Name": "Church & Dwight", "Sector": "Consumer Staples", "Symbol": "CHD"},{"Name": "CIGNA Corp.", "Sector": "Health Care", "Symbol": "CI"},{"Name": "Cimarex Energy", "Sector": "Energy", "Symbol": "XEC"},{"Name": "Cincinnati Financial", "Sector": "Financials", "Symbol": "CINF"},{"Name": "Cintas Corporation", "Sector": "Industrials", "Symbol": "CTAS"},{"Name": "Cisco Systems", "Sector": "Information Technology", "Symbol": "CSCO"},{"Name": "Citigroup Inc.", "Sector": "Financials", "Symbol": "C"},{"Name": "Citizens Financial Group", "Sector": "Financials", "Symbol": "CFG"},{"Name": "Citrix Systems", "Sector": "Information Technology", "Symbol": "CTXS"},{"Name": "CME Group Inc.", "Sector": "Financials", "Symbol": "CME"},{"Name": "CMS Energy", "Sector": "Utilities", "Symbol": "CMS"},{"Name": "Coca-Cola Company (The)", "Sector": "Consumer Staples", "Symbol": "KO"},{"Name": "Cognizant Technology Solutions", "Sector": "Information Technology", "Symbol": "CTSH"},{"Name": "Colgate-Palmolive", "Sector": "Consumer Staples", "Symbol": "CL"},{"Name": "Comcast Corp.", "Sector": "Consumer Discretionary", "Symbol": "CMCSA"},{"Name": "Comerica Inc.", "Sector": "Financials", "Symbol": "CMA"},{"Name": "Conagra Brands", "Sector": "Consumer Staples", "Symbol": "CAG"},{"Name": "Concho Resources", "Sector": "Energy", "Symbol": "CXO"},{"Name": "ConocoPhillips", "Sector": "Energy", "Symbol": "COP"},{"Name": "Consolidated Edison", "Sector": "Utilities", "Symbol": "ED"},{"Name": "Constellation Brands", "Sector": "Consumer Staples", "Symbol": "STZ"},{"Name": "Corning Inc.", "Sector": "Information Technology", "Symbol": "GLW"},{"Name": "Costco Wholesale Corp.", "Sector": "Consumer Staples", "Symbol": "COST"},{"Name": "Coty, Inc", "Sector": "Consumer Staples", "Symbol": "COTY"},{"Name": "Crown Castle International Corp.", "Sector": "Real Estate", "Symbol": "CCI"},{"Name": "CSRA Inc.", "Sector": "Information Technology", "Symbol": "CSRA"},{"Name": "CSX Corp.", "Sector": "Industrials", "Symbol": "CSX"},{"Name": "Cummins Inc.", "Sector": "Industrials", "Symbol": "CMI"},{"Name": "CVS Health", "Sector": "Consumer Staples", "Symbol": "CVS"},{"Name": "D. R. Horton", "Sector": "Consumer Discretionary", "Symbol": "DHI"},{"Name": "Danaher Corp.", "Sector": "Health Care", "Symbol": "DHR"},{"Name": "Darden Restaurants", "Sector": "Consumer Discretionary", "Symbol": "DRI"},{"Name": "DaVita Inc.", "Sector": "Health Care", "Symbol": "DVA"},{"Name": "Deere & Co.", "Sector": "Industrials", "Symbol": "DE"},{"Name": "Delta Air Lines Inc.", "Sector": "Industrials", "Symbol": "DAL"},{"Name": "Dentsply Sirona", "Sector": "Health Care", "Symbol": "XRAY"},{"Name": "Devon Energy Corp.", "Sector": "Energy", "Symbol": "DVN"},{"Name": "Digital Realty Trust Inc", "Sector": "Real Estate", "Symbol": "DLR"},{"Name": "Discover Financial Services", "Sector": "Financials", "Symbol": "DFS"},{"Name": "Discovery Inc. Class A", "Sector": "Consumer Discretionary", "Symbol": "DISCA"},{"Name": "Discovery Inc. Class C", "Sector": "Consumer Discretionary", "Symbol": "DISCK"},{"Name": "Dish Network", "Sector": "Consumer Discretionary", "Symbol": "DISH"},{"Name": "Dollar General", "Sector": "Consumer Discretionary", "Symbol": "DG"},{"Name": "Dollar Tree", "Sector": "Consumer Discretionary", "Symbol": "DLTR"},{"Name": "Dominion Energy", "Sector": "Utilities", "Symbol": "D"},{"Name": "Dover Corp.", "Sector": "Industrials", "Symbol": "DOV"},{"Name": "DowDuPont", "Sector": "Materials", "Symbol": "DWDP"},{"Name": "Dr Pepper Snapple Group", "Sector": "Consumer Staples", "Symbol": "DPS"},{"Name": "DTE Energy Co.", "Sector": "Utilities", "Symbol": "DTE"},{"Name": "Duke Energy", "Sector": "Utilities", "Symbol": "DUK"},{"Name": "Duke Realty Corp", "Sector": "Real Estate", "Symbol": "DRE"},{"Name": "DXC Technology", "Sector": "Information Technology", "Symbol": "DXC"},{"Name": "E*Trade", "Sector": "Financials", "Symbol": "ETFC"},{"Name": "Eastman Chemical", "Sector": "Materials", "Symbol": "EMN"},{"Name": "Eaton Corporation", "Sector": "Industrials", "Symbol": "ETN"},{"Name": "eBay Inc.", "Sector": "Information Technology", "Symbol": "EBAY"},{"Name": "Ecolab Inc.", "Sector": "Materials", "Symbol": "ECL"},{"Name": "Edison Int'l", "Sector": "Utilities", "Symbol": "EIX"},{"Name": "Edwards Lifesciences", "Sector": "Health Care", "Symbol": "EW"},{"Name": "Electronic Arts", "Sector": "Information Technology", "Symbol": "EA"},{"Name": "Emerson Electric Company", "Sector": "Industrials", "Symbol": "EMR"},{"Name": "Entergy Corp.", "Sector": "Utilities", "Symbol": "ETR"},{"Name": "Envision Healthcare", "Sector": "Health Care", "Symbol": "EVHC"},{"Name": "EOG Resources", "Sector": "Energy", "Symbol": "EOG"},{"Name": "EQT Corporation", "Sector": "Energy", "Symbol": "EQT"},{"Name": "Equifax Inc.", "Sector": "Industrials", "Symbol": "EFX"},{"Name": "Equinix", "Sector": "Real Estate", "Symbol": "EQIX"},{"Name": "Equity Residential", "Sector": "Real Estate", "Symbol": "EQR"},{"Name": "Essex Property Trust, Inc.", "Sector": "Real Estate", "Symbol": "ESS"},{"Name": "Estee Lauder Cos.", "Sector": "Consumer Staples", "Symbol": "EL"},{"Name": "Everest Re Group Ltd.", "Sector": "Financials", "Symbol": "RE"},{"Name": "Eversource Energy", "Sector": "Utilities", "Symbol": "ES"},{"Name": "Exelon Corp.", "Sector": "Utilities", "Symbol": "EXC"},{"Name": "Expedia Inc.", "Sector": "Consumer Discretionary", "Symbol": "EXPE"},{"Name": "Expeditors International", "Sector": "Industrials", "Symbol": "EXPD"},{"Name": "Express Scripts", "Sector": "Health Care", "Symbol": "ESRX"},{"Name": "Extra Space Storage", "Sector": "Real Estate", "Symbol": "EXR"},{"Name": "Exxon Mobil Corp.", "Sector": "Energy", "Symbol": "XOM"},{"Name": "F5 Networks", "Sector": "Information Technology", "Symbol": "FFIV"},{"Name": "Facebook, Inc.", "Sector": "Information Technology", "Symbol": "FB"},{"Name": "Fastenal Co", "Sector": "Industrials", "Symbol": "FAST"},{"Name": "Federal Realty Investment Trust", "Sector": "Real Estate", "Symbol": "FRT"},{"Name": "FedEx Corporation", "Sector": "Industrials", "Symbol": "FDX"},{"Name": "Fidelity National Information Services", "Sector": "Information Technology", "Symbol": "FIS"},{"Name": "Fifth Third Bancorp", "Sector": "Financials", "Symbol": "FITB"},{"Name": "FirstEnergy Corp", "Sector": "Utilities", "Symbol": "FE"},{"Name": "Fiserv Inc", "Sector": "Information Technology", "Symbol": "FISV"},{"Name": "FLIR Systems", "Sector": "Information Technology", "Symbol": "FLIR"},{"Name": "Flowserve Corporation", "Sector": "Industrials", "Symbol": "FLS"},{"Name": "Fluor Corp.", "Sector": "Industrials", "Symbol": "FLR"},{"Name": "FMC Corporation", "Sector": "Materials", "Symbol": "FMC"},{"Name": "Foot Locker Inc", "Sector": "Consumer Discretionary", "Symbol": "FL"},{"Name": "Ford Motor", "Sector": "Consumer Discretionary", "Symbol": "F"},{"Name": "Fortive Corp", "Sector": "Industrials", "Symbol": "FTV"},{"Name": "Fortune Brands Home & Security", "Sector": "Industrials", "Symbol": "FBHS"},{"Name": "Franklin Resources", "Sector": "Financials", "Symbol": "BEN"},{"Name": "Freeport-McMoRan Inc.", "Sector": "Materials", "Symbol": "FCX"},{"Name": "Gap Inc.", "Sector": "Consumer Discretionary", "Symbol": "GPS"},{"Name": "Garmin Ltd.", "Sector": "Consumer Discretionary", "Symbol": "GRMN"},{"Name": "Gartner Inc", "Sector": "Information Technology", "Symbol": "IT"},{"Name": "General Dynamics", "Sector": "Industrials", "Symbol": "GD"},{"Name": "General Electric", "Sector": "Industrials", "Symbol": "GE"},{"Name": "General Growth Properties Inc.", "Sector": "Real Estate", "Symbol": "GGP"},{"Name": "General Mills", "Sector": "Consumer Staples", "Symbol": "GIS"},{"Name": "General Motors", "Sector": "Consumer Discretionary", "Symbol": "GM"},{"Name": "Genuine Parts", "Sector": "Consumer Discretionary", "Symbol": "GPC"},{"Name": "Gilead Sciences", "Sector": "Health Care", "Symbol": "GILD"},{"Name": "Global Payments Inc.", "Sector": "Information Technology", "Symbol": "GPN"},{"Name": "Goldman Sachs Group", "Sector": "Financials", "Symbol": "GS"},{"Name": "Goodyear Tire & Rubber", "Sector": "Consumer Discretionary", "Symbol": "GT"},{"Name": "Grainger (W.W.) Inc.", "Sector": "Industrials", "Symbol": "GWW"},{"Name": "Halliburton Co.", "Sector": "Energy", "Symbol": "HAL"},{"Name": "Hanesbrands Inc", "Sector": "Consumer Discretionary", "Symbol": "HBI"},{"Name": "Harley-Davidson", "Sector": "Consumer Discretionary", "Symbol": "HOG"},{"Name": "Harris Corporation", "Sector": "Information Technology", "Symbol": "HRS"},{"Name": "Hartford Financial Svc.Gp.", "Sector": "Financials", "Symbol": "HIG"},{"Name": "Hasbro Inc.", "Sector": "Consumer Discretionary", "Symbol": "HAS"},{"Name": "HCA Holdings", "Sector": "Health Care", "Symbol": "HCA"},{"Name": "HCP Inc.", "Sector": "Real Estate", "Symbol": "HCP"},{"Name": "Helmerich & Payne", "Sector": "Energy", "Symbol": "HP"},{"Name": "Henry Schein", "Sector": "Health Care", "Symbol": "HSIC"},{"Name": "Hess Corporation", "Sector": "Energy", "Symbol": "HES"},{"Name": "Hewlett Packard Enterprise", "Sector": "Information Technology", "Symbol": "HPE"},{"Name": "Hilton Worldwide Holdings Inc", "Sector": "Consumer Discretionary", "Symbol": "HLT"},{"Name": "Hologic", "Sector": "Health Care", "Symbol": "HOLX"},{"Name": "Home Depot", "Sector": "Consumer Discretionary", "Symbol": "HD"},{"Name": "Honeywell Int'l Inc.", "Sector": "Industrials", "Symbol": "HON"},{"Name": "Hormel Foods Corp.", "Sector": "Consumer Staples", "Symbol": "HRL"},{"Name": "Host Hotels & Resorts", "Sector": "Real Estate", "Symbol": "HST"},{"Name": "HP Inc.", "Sector": "Information Technology", "Symbol": "HPQ"},{"Name": "Humana Inc.", "Sector": "Health Care", "Symbol": "HUM"},{"Name": "Huntington Bancshares", "Sector": "Financials", "Symbol": "HBAN"},{"Name": "Huntington Ingalls Industries", "Sector": "Industrials", "Symbol": "HII"},{"Name": "IDEXX Laboratories", "Sector": "Health Care", "Symbol": "IDXX"},{"Name": "IHS Markit Ltd.", "Sector": "Industrials", "Symbol": "INFO"},{"Name": "Illinois Tool Works", "Sector": "Industrials", "Symbol": "ITW"},{"Name": "Illumina Inc", "Sector": "Health Care", "Symbol": "ILMN"},{"Name": "Incyte", "Sector": "Health Care", "Symbol": "INCY"},{"Name": "Ingersoll-Rand PLC", "Sector": "Industrials", "Symbol": "IR"},{"Name": "Intel Corp.", "Sector": "Information Technology", "Symbol": "INTC"},{"Name": "Intercontinental Exchange", "Sector": "Financials", "Symbol": "ICE"},{"Name": "International Business Machines", "Sector": "Information Technology", "Symbol": "IBM"},{"Name": "International Paper", "Sector": "Materials", "Symbol": "IP"},{"Name": "Interpublic Group", "Sector": "Consumer Discretionary", "Symbol": "IPG"},{"Name": "Intl Flavors & Fragrances", "Sector": "Materials", "Symbol": "IFF"},{"Name": "Intuit Inc.", "Sector": "Information Technology", "Symbol": "INTU"},{"Name": "Intuitive Surgical Inc.", "Sector": "Health Care", "Symbol": "ISRG"},{"Name": "Invesco Ltd.", "Sector": "Financials", "Symbol": "IVZ"},{"Name": "IPG Photonics Corp.", "Sector": "Information Technology", "Symbol": "IPGP"},{"Name": "IQVIA Holdings Inc.", "Sector": "Health Care", "Symbol": "IQV"},{"Name": "Iron Mountain Incorporated", "Sector": "Real Estate", "Symbol": "IRM"},{"Name": "J. B. Hunt Transport Services", "Sector": "Industrials", "Symbol": "JBHT"},{"Name": "Jacobs Engineering Group", "Sector": "Industrials", "Symbol": "JEC"},{"Name": "JM Smucker", "Sector": "Consumer Staples", "Symbol": "SJM"},{"Name": "Johnson & Johnson", "Sector": "Health Care", "Symbol": "JNJ"},{"Name": "Johnson Controls International", "Sector": "Industrials", "Symbol": "JCI"},{"Name": "JPMorgan Chase & Co.", "Sector": "Financials", "Symbol": "JPM"},{"Name": "Juniper Networks", "Sector": "Information Technology", "Symbol": "JNPR"},{"Name": "Kansas City Southern", "Sector": "Industrials", "Symbol": "KSU"},{"Name": "Kellogg Co.", "Sector": "Consumer Staples", "Symbol": "K"},{"Name": "KeyCorp", "Sector": "Financials", "Symbol": "KEY"},{"Name": "Kimberly-Clark", "Sector": "Consumer Staples", "Symbol": "KMB"},{"Name": "Kimco Realty", "Sector": "Real Estate", "Symbol": "KIM"},{"Name": "Kinder Morgan", "Sector": "Energy", "Symbol": "KMI"},{"Name": "KLA-Tencor Corp.", "Sector": "Information Technology", "Symbol": "KLAC"},{"Name": "Kohl's Corp.", "Sector": "Consumer Discretionary", "Symbol": "KSS"},{"Name": "Kraft Heinz Co", "Sector": "Consumer Staples", "Symbol": "KHC"},{"Name": "Kroger Co.", "Sector": "Consumer Staples", "Symbol": "KR"},{"Name": "L Brands Inc.", "Sector": "Consumer Discretionary", "Symbol": "LB"},{"Name": "L-3 Communications Holdings", "Sector": "Industrials", "Symbol": "LLL"},{"Name": "Laboratory Corp. of America Holding", "Sector": "Health Care", "Symbol": "LH"},{"Name": "Lam Research", "Sector": "Information Technology", "Symbol": "LRCX"},{"Name": "Leggett & Platt", "Sector": "Consumer Discretionary", "Symbol": "LEG"},{"Name": "Lennar Corp.", "Sector": "Consumer Discretionary", "Symbol": "LEN"},{"Name": "Leucadia National Corp.", "Sector": "Financials", "Symbol": "LUK"},{"Name": "Lilly (Eli) & Co.", "Sector": "Health Care", "Symbol": "LLY"},{"Name": "Lincoln National", "Sector": "Financials", "Symbol": "LNC"},{"Name": "LKQ Corporation", "Sector": "Consumer Discretionary", "Symbol": "LKQ"},{"Name": "Lockheed Martin Corp.", "Sector": "Industrials", "Symbol": "LMT"},{"Name": "Loews Corp.", "Sector": "Financials", "Symbol": "L"},{"Name": "Lowe's Cos.", "Sector": "Consumer Discretionary", "Symbol": "LOW"},{"Name": "LyondellBasell", "Sector": "Materials", "Symbol": "LYB"},{"Name": "M&T Bank Corp.", "Sector": "Financials", "Symbol": "MTB"},{"Name": "Macerich", "Sector": "Real Estate", "Symbol": "MAC"},{"Name": "Macy's Inc.", "Sector": "Consumer Discretionary", "Symbol": "M"},{"Name": "Marathon Oil Corp.", "Sector": "Energy", "Symbol": "MRO"},{"Name": "Marathon Petroleum", "Sector": "Energy", "Symbol": "MPC"},{"Name": "Marriott Int'l.", "Sector": "Consumer Discretionary", "Symbol": "MAR"},{"Name": "Marsh & McLennan", "Sector": "Financials", "Symbol": "MMC"},{"Name": "Martin Marietta Materials", "Sector": "Materials", "Symbol": "MLM"},{"Name": "Masco Corp.", "Sector": "Industrials", "Symbol": "MAS"},{"Name": "Mastercard Inc.", "Sector": "Information Technology", "Symbol": "MA"},{"Name": "Mattel Inc.", "Sector": "Consumer Discretionary", "Symbol": "MAT"},{"Name": "McCormick & Co.", "Sector": "Consumer Staples", "Symbol": "MKC"},{"Name": "McDonald's Corp.", "Sector": "Consumer Discretionary", "Symbol": "MCD"},{"Name": "McKesson Corp.", "Sector": "Health Care", "Symbol": "MCK"},{"Name": "Medtronic plc", "Sector": "Health Care", "Symbol": "MDT"},{"Name": "Merck & Co.", "Sector": "Health Care", "Symbol": "MRK"},{"Name": "MetLife Inc.", "Sector": "Financials", "Symbol": "MET"},{"Name": "Mettler Toledo", "Sector": "Health Care", "Symbol": "MTD"},{"Name": "MGM Resorts International", "Sector": "Consumer Discretionary", "Symbol": "MGM"},{"Name": "Michael Kors Holdings", "Sector": "Consumer Discretionary", "Symbol": "KORS"},{"Name": "Microchip Technology", "Sector": "Information Technology", "Symbol": "MCHP"},{"Name": "Micron Technology", "Sector": "Information Technology", "Symbol": "MU"},{"Name": "Microsoft Corp.", "Sector": "Information Technology", "Symbol": "MSFT"},{"Name": "Mid-America Apartments", "Sector": "Real Estate", "Symbol": "MAA"},{"Name": "Mohawk Industries", "Sector": "Consumer Discretionary", "Symbol": "MHK"},{"Name": "Molson Coors Brewing Company", "Sector": "Consumer Staples", "Symbol": "TAP"},{"Name": "Mondelez International", "Sector": "Consumer Staples", "Symbol": "MDLZ"},{"Name": "Monsanto Co.", "Sector": "Materials", "Symbol": "MON"},{"Name": "Monster Beverage", "Sector": "Consumer Staples", "Symbol": "MNST"},{"Name": "Moody's Corp", "Sector": "Financials", "Symbol": "MCO"},{"Name": "Morgan Stanley", "Sector": "Financials", "Symbol": "MS"},{"Name": "Motorola Solutions Inc.", "Sector": "Information Technology", "Symbol": "MSI"},{"Name": "Mylan N.V.", "Sector": "Health Care", "Symbol": "MYL"},{"Name": "Nasdaq, Inc.", "Sector": "Financials", "Symbol": "NDAQ"},{"Name": "National Oilwell Varco Inc.", "Sector": "Energy", "Symbol": "NOV"},{"Name": "Navient", "Sector": "Financials", "Symbol": "NAVI"},{"Name": "Nektar Therapeutics", "Sector": "Health Care", "Symbol": "NKTR"},{"Name": "NetApp", "Sector": "Information Technology", "Symbol": "NTAP"},{"Name": "Netflix Inc.", "Sector": "Information Technology", "Symbol": "NFLX"},{"Name": "Newell Brands", "Sector": "Consumer Discretionary", "Symbol": "NWL"},{"Name": "Newfield Exploration Co", "Sector": "Energy", "Symbol": "NFX"},{"Name": "Newmont Mining Corporation", "Sector": "Materials", "Symbol": "NEM"},{"Name": "News Corp. Class A", "Sector": "Consumer Discretionary", "Symbol": "NWSA"},{"Name": "News Corp. Class B", "Sector": "Consumer Discretionary", "Symbol": "NWS"},{"Name": "NextEra Energy", "Sector": "Utilities", "Symbol": "NEE"},{"Name": "Nielsen Holdings", "Sector": "Industrials", "Symbol": "NLSN"},{"Name": "Nike", "Sector": "Consumer Discretionary", "Symbol": "NKE"},{"Name": "NiSource Inc.", "Sector": "Utilities", "Symbol": "NI"},{"Name": "Noble Energy Inc", "Sector": "Energy", "Symbol": "NBL"},{"Name": "Nordstrom", "Sector": "Consumer Discretionary", "Symbol": "JWN"},{"Name": "Norfolk Southern Corp.", "Sector": "Industrials", "Symbol": "NSC"},{"Name": "Northern Trust Corp.", "Sector": "Financials", "Symbol": "NTRS"},{"Name": "Northrop Grumman Corp.", "Sector": "Industrials", "Symbol": "NOC"},{"Name": "Norwegian Cruise Line", "Sector": "Consumer Discretionary", "Symbol": "NCLH"},{"Name": "NRG Energy", "Sector": "Utilities", "Symbol": "NRG"},{"Name": "Nucor Corp.", "Sector": "Materials", "Symbol": "NUE"},{"Name": "Nvidia Corporation", "Sector": "Information Technology", "Symbol": "NVDA"},{"Name": "O'Reilly Automotive", "Sector": "Consumer Discretionary", "Symbol": "ORLY"},{"Name": "Occidental Petroleum", "Sector": "Energy", "Symbol": "OXY"},{"Name": "Omnicom Group", "Sector": "Consumer Discretionary", "Symbol": "OMC"},{"Name": "ONEOK", "Sector": "Energy", "Symbol": "OKE"},{"Name": "Oracle Corp.", "Sector": "Information Technology", "Symbol": "ORCL"},{"Name": "PACCAR Inc.", "Sector": "Industrials", "Symbol": "PCAR"},{"Name": "Packaging Corporation of America", "Sector": "Materials", "Symbol": "PKG"},{"Name": "Parker-Hannifin", "Sector": "Industrials", "Symbol": "PH"},{"Name": "Paychex Inc.", "Sector": "Information Technology", "Symbol": "PAYX"},{"Name": "PayPal", "Sector": "Information Technology", "Symbol": "PYPL"},{"Name": "Pentair Ltd.", "Sector": "Industrials", "Symbol": "PNR"},{"Name": "People's United Financial", "Sector": "Financials", "Symbol": "PBCT"},{"Name": "PepsiCo Inc.", "Sector": "Consumer Staples", "Symbol": "PEP"},{"Name": "PerkinElmer", "Sector": "Health Care", "Symbol": "PKI"},{"Name": "Perrigo", "Sector": "Health Care", "Symbol": "PRGO"},{"Name": "Pfizer Inc.", "Sector": "Health Care", "Symbol": "PFE"},{"Name": "PG&E Corp.", "Sector": "Utilities", "Symbol": "PCG"},{"Name": "Philip Morris International", "Sector": "Consumer Staples", "Symbol": "PM"},{"Name": "Phillips 66", "Sector": "Energy", "Symbol": "PSX"},{"Name": "Pinnacle West Capital", "Sector": "Utilities", "Symbol": "PNW"},{"Name": "Pioneer Natural Resources", "Sector": "Energy", "Symbol": "PXD"},{"Name": "PNC Financial Services", "Sector": "Financials", "Symbol": "PNC"},{"Name": "Polo Ralph Lauren Corp.", "Sector": "Consumer Discretionary", "Symbol": "RL"},{"Name": "PPG Industries", "Sector": "Materials", "Symbol": "PPG"},{"Name": "PPL Corp.", "Sector": "Utilities", "Symbol": "PPL"},{"Name": "Praxair Inc.", "Sector": "Materials", "Symbol": "PX"},{"Name": "Principal Financial Group", "Sector": "Financials", "Symbol": "PFG"},{"Name": "Procter & Gamble", "Sector": "Consumer Staples", "Symbol": "PG"},{"Name": "Progressive Corp.", "Sector": "Financials", "Symbol": "PGR"},{"Name": "Prologis", "Sector": "Real Estate", "Symbol": "PLD"},{"Name": "Prudential Financial", "Sector": "Financials", "Symbol": "PRU"},{"Name": "Public Serv. Enterprise Inc.", "Sector": "Utilities", "Symbol": "PEG"},{"Name": "Public Storage", "Sector": "Real Estate", "Symbol": "PSA"},{"Name": "Pulte Homes Inc.", "Sector": "Consumer Discretionary", "Symbol": "PHM"},{"Name": "PVH Corp.", "Sector": "Consumer Discretionary", "Symbol": "PVH"},{"Name": "Qorvo", "Sector": "Information Technology", "Symbol": "QRVO"},{"Name": "QUALCOMM Inc.", "Sector": "Information Technology", "Symbol": "QCOM"},{"Name": "Quanta Services Inc.", "Sector": "Industrials", "Symbol": "PWR"},{"Name": "Quest Diagnostics", "Sector": "Health Care", "Symbol": "DGX"},{"Name": "Range Resources Corp.", "Sector": "Energy", "Symbol": "RRC"},{"Name": "Raymond James Financial Inc.", "Sector": "Financials", "Symbol": "RJF"},{"Name": "Raytheon Co.", "Sector": "Industrials", "Symbol": "RTN"},{"Name": "Realty Income Corporation", "Sector": "Real Estate", "Symbol": "O"},{"Name": "Red Hat Inc.", "Sector": "Information Technology", "Symbol": "RHT"},{"Name": "Regency Centers Corporation", "Sector": "Real Estate", "Symbol": "REG"},{"Name": "Regeneron", "Sector": "Health Care", "Symbol": "REGN"},{"Name": "Regions Financial Corp.", "Sector": "Financials", "Symbol": "RF"},{"Name": "Republic Services Inc", "Sector": "Industrials", "Symbol": "RSG"},{"Name": "ResMed", "Sector": "Health Care", "Symbol": "RMD"},{"Name": "Robert Half International", "Sector": "Industrials", "Symbol": "RHI"},{"Name": "Rockwell Automation Inc.", "Sector": "Industrials", "Symbol": "ROK"},{"Name": "Rockwell Collins", "Sector": "Industrials", "Symbol": "COL"},{"Name": "Roper Technologies", "Sector": "Industrials", "Symbol": "ROP"},{"Name": "Ross Stores", "Sector": "Consumer Discretionary", "Symbol": "ROST"},{"Name": "Royal Caribbean Cruises Ltd", "Sector": "Consumer Discretionary", "Symbol": "RCL"},{"Name": "S&P Global, Inc.", "Sector": "Financials", "Symbol": "SPGI"},{"Name": "Salesforce.com", "Sector": "Information Technology", "Symbol": "CRM"},{"Name": "SBA Communications", "Sector": "Real Estate", "Symbol": "SBAC"},{"Name": "SCANA Corp", "Sector": "Utilities", "Symbol": "SCG"},{"Name": "Schlumberger Ltd.", "Sector": "Energy", "Symbol": "SLB"},{"Name": "Seagate Technology", "Sector": "Information Technology", "Symbol": "STX"},{"Name": "Sealed Air", "Sector": "Materials", "Symbol": "SEE"},{"Name": "Sempra Energy", "Sector": "Utilities", "Symbol": "SRE"},{"Name": "Sherwin-Williams", "Sector": "Materials", "Symbol": "SHW"},{"Name": "Simon Property Group Inc", "Sector": "Real Estate", "Symbol": "SPG"},{"Name": "Skyworks Solutions", "Sector": "Information Technology", "Symbol": "SWKS"},{"Name": "SL Green Realty", "Sector": "Real Estate", "Symbol": "SLG"},{"Name": "Snap-On Inc.", "Sector": "Consumer Discretionary", "Symbol": "SNA"},{"Name": "Southern Co.", "Sector": "Utilities", "Symbol": "SO"},{"Name": "Southwest Airlines", "Sector": "Industrials", "Symbol": "LUV"},{"Name": "Stanley Black & Decker", "Sector": "Consumer Discretionary", "Symbol": "SWK"},{"Name": "Starbucks Corp.", "Sector": "Consumer Discretionary", "Symbol": "SBUX"},{"Name": "State Street Corp.", "Sector": "Financials", "Symbol": "STT"},{"Name": "Stericycle Inc", "Sector": "Industrials", "Symbol": "SRCL"},{"Name": "Stryker Corp.", "Sector": "Health Care", "Symbol": "SYK"},{"Name": "SunTrust Banks", "Sector": "Financials", "Symbol": "STI"},{"Name": "SVB Financial", "Sector": "Financials", "Symbol": "SIVB"},{"Name": "Symantec Corp.", "Sector": "Information Technology", "Symbol": "SYMC"},{"Name": "Synchrony Financial", "Sector": "Financials", "Symbol": "SYF"},{"Name": "Synopsys Inc.", "Sector": "Information Technology", "Symbol": "SNPS"},{"Name": "Sysco Corp.", "Sector": "Consumer Staples", "Symbol": "SYY"},{"Name": "T. Rowe Price Group", "Sector": "Financials", "Symbol": "TROW"},{"Name": "Take-Two Interactive", "Sector": "Information Technology", "Symbol": "TTWO"},{"Name": "Tapestry, Inc.", "Sector": "Consumer Discretionary", "Symbol": "TPR"},{"Name": "Target Corp.", "Sector": "Consumer Discretionary", "Symbol": "TGT"},{"Name": "TE Connectivity Ltd.", "Sector": "Information Technology", "Symbol": "TEL"},{"Name": "TechnipFMC", "Sector": "Energy", "Symbol": "FTI"},{"Name": "Texas Instruments", "Sector": "Information Technology", "Symbol": "TXN"},{"Name": "Textron Inc.", "Sector": "Industrials", "Symbol": "TXT"},{"Name": "The Bank of New York Mellon Corp.", "Sector": "Financials", "Symbol": "BK"},{"Name": "The Clorox Company", "Sector": "Consumer Staples", "Symbol": "CLX"},{"Name": "The Cooper Companies", "Sector": "Health Care", "Symbol": "COO"},{"Name": "The Hershey Company", "Sector": "Consumer Staples", "Symbol": "HSY"},{"Name": "The Mosaic Company", "Sector": "Materials", "Symbol": "MOS"},{"Name": "The Travelers Companies Inc.", "Sector": "Financials", "Symbol": "TRV"},{"Name": "The Walt Disney Company", "Sector": "Consumer Discretionary", "Symbol": "DIS"},{"Name": "Thermo Fisher Scientific", "Sector": "Health Care", "Symbol": "TMO"},{"Name": "Tiffany & Co.", "Sector": "Consumer Discretionary", "Symbol": "TIF"},{"Name": "Time Warner Inc.", "Sector": "Consumer Discretionary", "Symbol": "TWX"},{"Name": "TJX Companies Inc.", "Sector": "Consumer Discretionary", "Symbol": "TJX"},{"Name": "Torchmark Corp.", "Sector": "Financials", "Symbol": "TMK"},{"Name": "Total System Services", "Sector": "Information Technology", "Symbol": "TSS"},{"Name": "Tractor Supply Company", "Sector": "Consumer Discretionary", "Symbol": "TSCO"},{"Name": "TransDigm Group", "Sector": "Industrials", "Symbol": "TDG"},{"Name": "TripAdvisor", "Sector": "Consumer Discretionary", "Symbol": "TRIP"},{"Name": "Twenty-First Century Fox Class A", "Sector": "Consumer Discretionary", "Symbol": "FOXA"},{"Name": "Twenty-First Century Fox Class B", "Sector": "Consumer Discretionary", "Symbol": "FOX"},{"Name": "Tyson Foods", "Sector": "Consumer Staples", "Symbol": "TSN"},{"Name": "U.S. Bancorp", "Sector": "Financials", "Symbol": "USB"},{"Name": "UDR Inc", "Sector": "Real Estate", "Symbol": "UDR"},{"Name": "Ulta Beauty", "Sector": "Consumer Discretionary", "Symbol": "ULTA"},{"Name": "Under Armour Class A", "Sector": "Consumer Discretionary", "Symbol": "UAA"},{"Name": "Under Armour Class C", "Sector": "Consumer Discretionary", "Symbol": "UA"},{"Name": "Union Pacific", "Sector": "Industrials", "Symbol": "UNP"},{"Name": "United Continental Holdings", "Sector": "Industrials", "Symbol": "UAL"},{"Name": "United Health Group Inc.", "Sector": "Health Care", "Symbol": "UNH"},{"Name": "United Parcel Service", "Sector": "Industrials", "Symbol": "UPS"},{"Name": "United Rentals, Inc.", "Sector": "Industrials", "Symbol": "URI"},{"Name": "United Technologies", "Sector": "Industrials", "Symbol": "UTX"},{"Name": "Universal Health Services, Inc.", "Sector": "Health Care", "Symbol": "UHS"},{"Name": "Unum Group", "Sector": "Financials", "Symbol": "UNM"},{"Name": "V.F. Corp.", "Sector": "Consumer Discretionary", "Symbol": "VFC"},{"Name": "Valero Energy", "Sector": "Energy", "Symbol": "VLO"},{"Name": "Varian Medical Systems", "Sector": "Health Care", "Symbol": "VAR"},{"Name": "Ventas Inc", "Sector": "Real Estate", "Symbol": "VTR"},{"Name": "Verisign Inc.", "Sector": "Information Technology", "Symbol": "VRSN"},{"Name": "Verisk Analytics", "Sector": "Industrials", "Symbol": "VRSK"},{"Name": "Verizon Communications", "Sector": "Telecommunication Services", "Symbol": "VZ"},{"Name": "Vertex Pharmaceuticals Inc", "Sector": "Health Care", "Symbol": "VRTX"},{"Name": "Viacom Inc.", "Sector": "Consumer Discretionary", "Symbol": "VIAB"},{"Name": "Visa Inc.", "Sector": "Information Technology", "Symbol": "V"},{"Name": "Vornado Realty Trust", "Sector": "Real Estate", "Symbol": "VNO"},{"Name": "Vulcan Materials", "Sector": "Materials", "Symbol": "VMC"},{"Name": "Wal-Mart Stores", "Sector": "Consumer Staples", "Symbol": "WMT"},{"Name": "Walgreens Boots Alliance", "Sector": "Consumer Staples", "Symbol": "WBA"},{"Name": "Waste Management Inc.", "Sector": "Industrials", "Symbol": "WM"},{"Name": "Waters Corporation", "Sector": "Health Care", "Symbol": "WAT"},{"Name": "Wec Energy Group Inc", "Sector": "Utilities", "Symbol": "WEC"},{"Name": "Wells Fargo", "Sector": "Financials", "Symbol": "WFC"},{"Name": "Welltower Inc.", "Sector": "Real Estate", "Symbol": "WELL"},{"Name": "Western Digital", "Sector": "Information Technology", "Symbol": "WDC"},{"Name": "Western Union Co", "Sector": "Information Technology", "Symbol": "WU"},{"Name": "WestRock Company", "Sector": "Materials", "Symbol": "WRK"},{"Name": "Weyerhaeuser Corp.", "Sector": "Real Estate", "Symbol": "WY"},{"Name": "Whirlpool Corp.", "Sector": "Consumer Discretionary", "Symbol": "WHR"},{"Name": "Williams Cos.", "Sector": "Energy", "Symbol": "WMB"},{"Name": "Willis Towers Watson", "Sector": "Financials", "Symbol": "WLTW"},{"Name": "Wyndham Worldwide", "Sector": "Consumer Discretionary", "Symbol": "WYN"},{"Name": "Wynn Resorts Ltd", "Sector": "Consumer Discretionary", "Symbol": "WYNN"},{"Name": "Xcel Energy Inc", "Sector": "Utilities", "Symbol": "XEL"},{"Name": "Xerox Corp.", "Sector": "Information Technology", "Symbol": "XRX"},{"Name": "Xilinx Inc", "Sector": "Information Technology", "Symbol": "XLNX"},{"Name": "XL Capital", "Sector": "Financials", "Symbol": "XL"},{"Name": "Xylem Inc.", "Sector": "Industrials", "Symbol": "XYL"},{"Name": "Yum! Brands Inc", "Sector": "Consumer Discretionary", "Symbol": "YUM"},{"Name": "Zimmer Biomet Holdings", "Sector": "Health Care", "Symbol": "ZBH"},{"Name": "Zions Bancorp", "Sector": "Financials", "Symbol": "ZION"},{"Name": "Zoetis", "Sector": "Health Care", "Symbol": "ZTS"}]

#Generating dictionary of stock company sector, name and symbol
tickermapdict = {}
for each in tickermap:
  sector = each['Sector']
  name = each['Name']
  symbol = each['Symbol']
  tickermapdict[name.lower()] = symbol

#Function that filters through articles and finds if the text matches an element form the tickermapdict defined previously
def find_mentioned_stocks(strin):
  stklst = []
  for compx in tickermapdict:
    #print(compx[:4], compx[2:6], compx[3:7])
    jnstr = "".join(strin[:3000])
    if compx[:6] in jnstr or (
          compx[:3] in jnstr and compx[7:10] in jnstr):
            stklst.append(tickermapdict[compx])
  return stklst

"""##**Loading and Labelling Text Data**"""

#Function that loads all of the news articles into a list. Note only articles with greater than 1000 characters are considered. This excludes very short blogs. 
def load_files_to_json(files_list:list):
  import json
  data_list = []
  tens = 9.9
  for file in tqdm(files_list, position=0, leave=True):
    with open(file) as json_file:
        data = json.load(json_file)
        l = len(data['text'])
        d = data['published'][:10]
        if l > 1000 and d in iso_dateslist:
            data_list.append(data)
        else:
          pass
          #rint("file of length {} is too short".format(l))
  return data_list

# Commented out IPython magic to ensure Python compatibility.
#Collects files of news articles
#From the kaggle dataset the articles are in folders for each month
def collect_files(num_months):
    file_exts = []
    root = '/content/'
    notroot = '/content/drive/My Drive/APSPROJECT/'
    folders = ['2018_01_112b52537b67659ad3609a234388c50a',
              '2018_02_112b52537b67659ad3609a234388c50a', 
              '2018_03_112b52537b67659ad3609a234388c50a', 
              '2018_04_112b52537b67659ad3609a234388c50a', 
              '2018_05_112b52537b67659ad3609a234388c50a']
#     %cd ..
    for fold in (folders[:num_months]):
        fold = root + fold
        for file_name in os.listdir(fold):
            filext = fold + '/' + file_name
            file_exts.append(filext)
    print("there are {} file extensions".format(len(file_exts)))
    return file_exts

#Function that parses all of the json articles for their text and date component and converts them to tensors to run in the models
def _to_labeled_tensor(jsons):
    ct = 0
    date_component = jsons['published'][:10]
    text_component = jsons['text']

    try:
      #text_component = summarize_text(text_component)
      text_component = remove_stopwords(text_component) 
      stocks_to_label = find_mentioned_stocks(text_component)
      label_tensor = label_lookup(date_component, stocks_to_label)
      if len(stocks_to_label)>0:
        #print(stocks_to_label)
        #print(label_tensor.sum())
        #i = input()
        ct += 1
      #i = input()
    except KeyError:
      return(0,0,0), 1

    #obtain glove embedding of text component 
    article_tensor = tensorify_text(text_component)

    return (label_tensor, article_tensor, date_component), 0, ct

def label_all_jsons(json_list):
    labeled_tensors = []
    cts = 0
    tens = 0.9
    dcs={}
    for jfile in tqdm(json_list, position=0, leave=True):
      labeled_t, bad, ct = _to_labeled_tensor(jfile)
      cts += ct
      if not bad == 1: labeled_tensors.append(labeled_t)
    print(cts)
    return labeled_tensors

# Commented out IPython magic to ensure Python compatibility.
#Define files list and create list of all json articles
# %cd ..
files_list = collect_files(5)
# %cd ..
from tqdm import tqdm
json_articles = load_files_to_json(files_list)

print(len(json_articles))

#Generate dataset
the_dataset = label_all_jsons(json_articles)

"""##**Create Dataset for Model Training/Testing**"""

from torch.utils import data

class Dataset(data.Dataset):
  'Characterizes a dataset for PyTorch'
  def __init__(self, list_IDs, labels):
        super(Dataset, self).__init__()
        'Initialization'
        self.labels = labels
        self.list_IDs = list_IDs

  def __len__(self):
        'Denotes the total number of samples'
        return len(self.list_IDs)

  def __getitem__(self, index):
        'Generates one sample of data'
        # Select sample
        X= self.list_IDs[index]

        # Load data and get label
        #X = torch.load('data/' + ID + '.pt')
         
        y = self.labels[index]

        return X, y
  def __len__(self):
        return len(self.labels)

#Split data into training testing and validation sets
import random
ls_train, ts_train, ls_val, ts_val, ls_test, ts_test = [], [], [], [], [], []

dates = []
excludect=0
#the_dataset = the_dataset + the_dataset24
for i, x in enumerate(the_dataset):
    l, t, isodt = x[0], x[1], x[2]
    dates.append(isodt)
    
    #sequentially add data into train, val, and test - 
    #otherwise one set will have 'seen' the exact labels (as news falls on the same day)
    month = int(isodt[5:7])
    dt = int(isodt[8:11])

    if i%100<12:
        ls_train.append(l)
        ts_train.append(t)
    elif i%100 >=57 and i%100 <59 :
        ls_val.append(l)
        ts_val.append(t)
    elif i %100 >= 95 and i%100 < 97:
        ls_test.append(l)
        ts_test.append(t)

params = {'batch_size': 32,
          'shuffle': True,
          'num_workers': 0}

train_set, valid_set, test_set = [Dataset(x[0], x[1]) for x in [(ls_train, ts_train), (ls_val, ts_val), (ls_test, ts_test)]]
print(set(dates))
# Generators
train_loader = data.DataLoader(train_set, **params)
#validation_loader = data.DataLoader(valid_set, **params)
#test_loader = data.DataLoader(test_set, **params)

print(len(test_set), len(train_set), len(valid_set))

#Function that sets output values to 0 if they fall within a certain range
#Used to label and predict stocks with no change
def balance_tensor(inputtensor):
  t = inputtensor
  for i in range(len(list(t))):
    sd = t[i].std()
    tt = (t[i]>(-sd)) & (t[i]<sd)
    altervals =  (tt).nonzero().squeeze().squeeze().tolist()
    #print(altervals)
    for j in altervals:
      t[i][j] = 0
      #print(i, "-", j)
  return t

"""##**Model Architectures**"""

#Import required libraries
import torch
from torch import nn

class NewsEvaluator(nn.Module):

    def __init__(self, hidden_dim, tagset_size):
        super(NewsEvaluator, self).__init__()
        self.hidden_dim = hidden_dim
        self.embed_dim = 50
        self.vocab_size = 20
        self.name = "newsrnn"
        self.rnn = nn.RNN(self.embed_dim, self.hidden_dim, batch_first=True)
        self.fc = nn.Linear(self.hidden_dim, tagset_size)

    def forward(self, x):
        h0 = torch.zeros(1, x.size(0), self.hidden_dim)
        out, _ = self.rnn(x, h0)
        out = self.fc(out[:, -1, :])
        out = balance_tensor(out)
        return out

m = NewsEvaluator(hidden_dim = 16, tagset_size = len(ticker_list))

#RNN
class NewsEvaluator(nn.Module):

    def __init__(self, hidden_dim, tagset_size):
        super(NewsEvaluator, self).__init__()
        self.hidden_dim = hidden_dim
        self.embed_dim = 50
        self.vocab_size = 20
        self.name = "newsrnn"
        ###RNN
        self.rnn = nn.RNN(self.embed_dim, self.hidden_dim, batch_first=True)
        self.fc = nn.Linear(self.hidden_dim, tagset_size)
    

    def forward(self, x):
        ###RNN
        h0 = torch.zeros(1, x.size(0), self.hidden_dim)
        # Forward propagate the RNN
        out, _ = self.rnn(x, h0)
        #print(out.shape)
        # Pass the output of the last time step to the classifier
        out = self.fc(out[:, -1, :])
        #out = F.log_softmax(out)
        #print(out)
        out = balance_tensor(out)
        return out

#LSTM
import torch
from torch import nn
class NewsEvaluatorLSTM(nn.Module):
    def __init__(self, hidden_dim, output_size, n_layers=2, embedding_dim=50):
        
        super(NewsEvaluatorLSTM, self).__init__()
        
        self.output_size = output_size
        self.n_layers = n_layers
        self.hidden_dim = hidden_dim
        
        self.embedding_dim = embedding_dim

        self.lstm = nn.LSTM(embedding_dim, hidden_dim, n_layers, batch_first=True)
        
        self.fc = nn.Linear(hidden_dim, output_size)
        #needed?
        self.sigmoid = nn.Sigmoid()
        
    def forward(self, x, hidden):
        batch_size = x.size(0)
        x = x.long()
        print(x.shape)
        print(hidden)
        lstm_out, hidden = self.lstm(x, hidden)
        lstm_out = lstm_out.contiguous().view(-1, self.hidden_dim)
        
        out = self.fc(out)
        out = self.sigmoid(out)
        
        out = out.view(batch_size, -1)
        out = out[:,-1]
        return out, hidden
    
    def init_hidden(self, batch_size):
        weight = next(self.parameters()).data
        print(batch_size)
        hidden = (weight.new(self.n_layers, batch_size, self.hidden_dim).zero_().long().to(device),
                      weight.new(self.n_layers, batch_size, self.hidden_dim).zero_().long().to(device))
        return hidden

#CNN
class LargeNet(nn.Module):
    def __init__(self,hid_size,out_size):
        super(LargeNet, self).__init__()
        self.name = "large"
        self.conv1 = nn.Conv2d(1,5,3)
        self.pool = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(99*24*5, hid_size)
        self.fc2 = nn.Linear(hid_size, out_size)

    def forward(self, x):
        #print(x.shape)
        x=x.unsqueeze(0)
        #print(x.shape)
        x=torch.transpose(x,1,0)
        #x=torch.transpose(x,1,0)
        #print(x.shape)
        x=torch.sigmoid(self.conv1(x))
        #print(x.shape)
        x=self.pool(x)
        #print(x.shape)
        #print(x.shape)
        x = x.view(-1, 99*24*5)
        #print(x.shape)
        x = self.fc1(x)
        x=torch.sigmoid(x)
        x = self.fc2(x)
        #x = x.squeeze(1) # Flatten to [batch_size]
        return x

"""##**Functions for plotting and saving model name**"""

#Function to plot training curve
def plot_training_curve(path):
    """ Plots the training curve for a model run, given the csv files
    containing the train/validation error/loss.

    Args:
        path: The base path of the csv files produced during training
    """
    import matplotlib.pyplot as plt
    train_err = np.loadtxt("{}_train_acc.csv".format(path))
    val_err = np.loadtxt("{}_val_acc.csv".format(path))
    train_loss = np.loadtxt("{}_train_loss.csv".format(path))
    val_loss = np.loadtxt("{}_val_loss.csv".format(path))
    plt.title("Train vs Validation Accuracy ")
    n = len(train_err) # number of epochs
    plt.plot(range(1,n+1), train_err, label="Train")
    plt.plot(range(1,n+1), val_err, label="Validation")
    plt.xlabel("Epoch")
    plt.ylabel("Accuracy")
    plt.legend(loc='best')
    plt.show()
    plt.title("Train vs Validation Loss")
    plt.plot(range(1,n+1), train_loss, label="Train")
    plt.plot(range(1,n+1), val_loss, label="Validation")
    plt.xlabel("Epoch")
    plt.ylabel("Loss")
    plt.legend(loc='best')
    plt.show()

#Function to get model name
def get_model_name(name,learning_rate, num_epochs, bs):
    """ Generate a name for the model consisting of all the hyperparameter values

    Args:
        config: Configuration object containing the hyperparameters
    Returns:
        path: A string with the hyperparameter name and value concatenated
    """
    path = "nov25B_model_{0}_epochs{1}_lr{2}_bs{3}".format(name,
                                                   num_epochs,
                                                   learning_rate,
                                                    bs)
                                                   
    return path

"""## **Function to train and evaluate models**"""

# Evaluate Function
import numpy as np
def evaluate(model, loader, criterion, learning_rate):
    optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)
    acc = []

    total_loss = 0.0
    total_err = 0.0
    total_epoch = 0
    for data in tqdm(loader, position=0, leave=True):
        labels, articles = data
        labels = labels.squeeze(2)
        optimizer.zero_grad()
        out = model(articles)
        loss = criterion(out, labels)
        loss.backward()
        optimizer.step()
    acc.append(get_accuracy(model, loader))
    return acc[-1], loss

#Fucntion that asseses model accuracy
def get_accuracy(model, data_loader):
    corr, total = 0, 0
    
    for data in tqdm(data_loader, position=0, leave=True):
        labels, articles = data
        labels = labels.squeeze(2)

        output = model(articles)
        t1 = labels
        t2 = output
        t1neg = t1 < 0
        t2neg = t2 < 0
        t1pos = t1 > 0
        t2pos = t2 > 0

        tneg = t1neg == t2neg
        tpos = t1pos == t2pos
        
        corr += (tneg & tpos).sum().item()
        total += labels.shape[0]*labels.shape[1]
    return corr / total

#Function to train neural networks
def train_rnn_network(model, trainset, validset, num_epochs=10, learning_rate=0.01, bs = 128):
    from torch.utils import data
    #choose appropriate loss function
    criterion = nn.MSELoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)
    params = {'batch_size': bs,
          'shuffle': True,
          'num_workers': 0}
    train = data.DataLoader(train_set, **params)
    validation = data.DataLoader(valid_set, **params)     
    #losses, train_acc, valid_acc = [], [], []
    losses = []
    epochs = []
    train_acc = np.zeros(num_epochs)
    train_loss = np.zeros(num_epochs)
    val_acc = np.zeros(num_epochs)
    val_loss = np.zeros(num_epochs)
    maxvalacc = 0
    for epoch in range((num_epochs)):
        #hidden = model.init_hidden(bs)
        for data in tqdm(train, position=0, leave=True):
            #if i%(len(train))%40 == 1: print(i*100/len(train))
            labels, articles = data
            
            labels = labels.squeeze(2)
            #print(labels.shape, articles.shape)
            #i = input()
            optimizer.zero_grad()
            
            out = model(articles)
            loss = criterion(out[0], labels[0])
            loss.backward(retain_graph=True)
            optimizer.step()
        losses.append(float(loss))

        epochs.append(epoch)
        #train_acc.append(get_accuracy(model, train))
        #valid_acc.append(get_accuracy(model, valid))
        #train_acc[epoch] = get_accuracy(model,train)
        train_loss[epoch] = sum(losses)/len(losses)
        train_acc[epoch], _ = evaluate(model, train, nn.MSELoss(), learning_rate)

        val_acc[epoch], val_loss[epoch] = evaluate(model, validation, nn.MSELoss(), learning_rate)
        print("Epoch %d; Loss %f; Train Acc %f; Val Acc %f" % (epoch+1, loss, train_acc[epoch], val_acc[epoch]))

    # plotting
    
        model_path = get_model_name("newsrnn", learning_rate, num_epochs, bs)
        if val_acc[epoch] >= maxvalacc and train_acc[epoch] > val_acc[epoch]:
          torch.save(model.state_dict(), model_path)
          maxvalacc = val_acc[epoch]
    print("{}_train_acc.csv".format(model_path))
    epochs = np.arange(1, num_epochs + 1)
    np.savetxt("{}_train_acc.csv".format(model_path), train_acc)
    np.savetxt("{}_train_loss.csv".format(model_path), train_loss)
    np.savetxt("{}_val_acc.csv".format(model_path), val_acc)
    np.savetxt("{}_val_loss.csv".format(model_path), val_loss)

    return None

"""## **Results**

## **Baseline**
"""

CNN = LargeNet(1200,494)

train_rnn_network(CNN, train_set, valid_set, 10, 0.005516, 64)

model_path = get_model_name("newsrnn",  0.005516, 10, 64)
plot_training_curve(model_path)
!cp model_path /content/gdrive/My\ Drive/APS360 Project/

!cp model_path /content/gdrive/My Drive/APS360 working models

import torch

from google.colab import drive
drive.mount('/content/drive')

model_path = get_model_name("newsrnn", learning_rate, num_epochs, bs)

"""## **Trial 1**"""

## once we have fixed our label generator, we will be able to run our NN training
m = NewsEvaluator(hidden_dim = 16, tagset_size = len(ticker_list))

train_rnn_network(m, train_set, valid_set, 15, 0.005516, 64)

model_path = get_model_name("newsrnn",  0.005516, 15, 64)
plot_training_curve(model_path)
!cp model_path /content/gdrive/My\ Drive/APS360 Project/

"""## **Trial 2**"""

## once we have fixed our label generator, we will be able to run our NN training
m2 = NewsEvaluator(hidden_dim = 72, tagset_size = len(ticker_list))

train_rnn_network(m2, train_set, valid_set, 15, 0.05572, 64)

model_path = get_model_name("newsrnn",  15, 0.005572, 64)
plot_training_curve(model_path)
!cp model_path /content/gdrive/My\ Drive/APS360 Project/

"""## **Trail 3**"""

## once we have fixed our label generator, we will be able to run our NN training
m3 = NewsEvaluator(hidden_dim = 72, tagset_size = len(ticker_list))

train_rnn_network(m3, train_set, valid_set, 15, 0.005572, 16)

model_path = get_model_name("newsrnn",  15, 0.005572, 16)
plot_training_curve(model_path)
!cp model_path /content/gdrive/My\ Drive/APS360 Project/

"""## **Trial 4**"""

## once we have fixed our label generator, we will be able to run our NN training
m3 = NewsEvaluator(hidden_dim = 16, tagset_size = len(ticker_list))

train_rnn_network(m3, train_set, valid_set, 20, 0.004016, 40)

model_path = get_model_name("newsrnn",  20, 0.004016, 40)
plot_training_curve(model_path)
!cp model_path /content/gdrive/My\ Drive/APS360 Project/

"""##**Evaluation**"""

PATH = 'drive/My Drive/APS360 working models/model_newse_epochs0.0001_lr15_bs16'
model = NewsEvaluator(hidden_dim = 128, tagset_size = len(ticker_list)+1 )
model.load_state_dict(torch.load(PATH))
model.eval()

from torch.utils import data
params = {'batch_size': 64,
          'shuffle': True,
          'num_workers': 0}
test_loader = data.DataLoader(test_set, **params)
x, _ = evaluate(CNN, test_loader,nn.MSELoss(), 0.005516)
print(x)

model_path = get_model_name("newsrnn",  20, 0.005516, 30)
plot_training_curve(model_path)

text_test = "Facebook has a $52 billion problem: It’s got more cash than all but a handful of American companies, but so much of Washington is mad at the social media leader that the heat may be too much for the company to make the big acquisitions the market normally would expect. For finance types like Facebook CFO David Wehner, not to mention his boss, Facebook Chief Executive Mark Zuckerberg, all that cash on the balance sheet creates a fascinating problem. Facebook pays no dividend, but even adding a 2% dividend yield to its high-flying shares would consume only about $11 billion a year, at a company that generated $32 billion in operating cash flow over the last 12 months. Meanwhile, Facebook actually has slowed down the pace of its stock buybacks this year, after spending more than $11 billion on buybacks during 2018, when shares slumped to as low as $124. Currently, shares are trading near-$200."

text_component = remove_stopwords(text_test) 
#stocks_to_label = find_mentioned_stocks(text_component)
#label_tensor = label_lookup(date_component, stocks_to_label)
article_tensor = tensorify_text(text_component)

article_tensor=article_tensor.unsqueeze(0)

article_tensor.shape

output = model(article_tensor)

print(output.squeeze().shape)

print(output.squeeze()[:10])

import pprint

pprint.pprint(text_test)